#version 460

uniform float time;
uniform mat4 parentTransform;

struct Particle
{
	vec4 StartPosition;
	vec4 EndPosition;
    vec4 Color;
    mat4 model;
};

layout(std430, binding = 2) buffer particleBuffer
{
	Particle[] particles;
};

mat4 identity()
{
    return mat4(
    1, 0, 0, 0,
    0, 1, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1);
}

mat4 scale(float s)
{
	return mat4(s, 0, 0, 0,
	            0, s, 0, 0,
	            0, 0, s, 0,
	            0, 0, 0, 1);
}

mat4 rotate(float rad)
{
	return mat4(cos(rad), -sin(rad), 0, 0,
	            sin(rad), cos(rad), 0, 0,
	            0, 0, 1.0, 0,
	            0, 0, 0, 1.0);
}

mat4 translateold(vec2 p)
{
	return mat4(1, 0, 0, p.x,
	            0, 1, 0, p.y,
	            0, 0, 1, 0,
	            0, 0, 0, 1);
}

mat4 translate(vec2 p)
{
	return mat4(1, 0, 0, 0,
	            0, 1, 0, 0,
	            0, 0, 1, 0,
	            p.x, p.y, 0, 1);
}

float scale(float value, float inputMin, float inputMax, float outputMin, float outputMax)
{
    float scale = (outputMax - outputMin) / (inputMax - inputMin);
    return outputMin + (value - inputMin) * scale;
}

//If possible we are going to want to multithread this on the gpu like crazy
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main()
{
	for(int i = 0; i < particles.length(); i++)
	{
        mat4 draw = identity();

        mat4 sTran = scale(particles[i].StartPosition.w);
        mat4 rTran = rotate(particles[i].EndPosition.w);
        mat4 tTran = translate(particles[i].StartPosition.xy);

        //TODO: make sure this works
        //mat4 tTran = translate(vec2(
        //scale(time, particles[i].StartPosition.z, particles[i].EndPosition.z, particles[i].StartPosition.x, particles[i].EndPosition.x), 
        //scale(time, particles[i].StartPosition.z, particles[i].EndPosition.z, particles[i].StartPosition.y, particles[i].EndPosition.y)));

        draw *= sTran;
        draw *= rTran;
        draw *= tTran;
        //draw *= parentTransform;

        //Should be Column-Major...
        particles[i].model = draw;
	}
}