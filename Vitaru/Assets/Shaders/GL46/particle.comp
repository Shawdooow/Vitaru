#version 460

uniform float time;
uniform mat4 parentTransform;

layout(std430, binding = 2) buffer particleBuffer
{
	mat4[] models;
};

mat4 identity()
{
    return mat4(
    1, 0, 0, 0,
    0, 1, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1);
}

mat4 scale(float s)
{
	return mat4(s, 0, 0, 0,
	            0, s, 0, 0,
	            0, 0, s, 0,
	            0, 0, 0, 1);
}

mat4 rotateZ(float rad)
{
	return mat4(cos(rad), -sin(rad), 0, 0,
	            sin(rad), cos(rad), 0, 0,
	            0, 0, 1.0, 0,
	            0, 0, 0, 1.0);
}

mat4 translateColumn(vec2 p)
{
	return mat4(1, 0, 0, p.x,
	            0, 1, 0, p.y,
	            0, 0, 1, 0,
	            0, 0, 0, 1);
}

mat4 translateRow(vec2 p)
{
	return mat4(1, 0, 0, 0,
	            0, 1, 0, 0,
	            0, 0, 1, 0,
	            p.x, p.y, 0, 1);
}

float scale(float value, float inputMin, float inputMax, float outputMin, float outputMax)
{
    float scale = (outputMax - outputMin) / (inputMax - inputMin);
    return outputMin + (value - inputMin) * scale;
}

//If possible we are going to want to multithread this on the gpu like crazy
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main()
{
	for(int i = 0; i < models.length(); i++)
	{
        mat4 sTran = scale(models[i][1].z);
        mat4 rTran = rotateZ(models[i][1].w);
        mat4 tTran = translateRow(models[i][0].xy);

        //TODO: make sure this works
        //mat4 tTran = translateRow(vec2(
        //scale(time, particles[i].StartPosition.z, particles[i].EndPosition.z, particles[i].StartPosition.x, particles[i].EndPosition.x), 
        //scale(time, particles[i].StartPosition.z, particles[i].EndPosition.z, particles[i].StartPosition.y, particles[i].EndPosition.y)));

		mat4 draw = identity();

        draw *= sTran;
        draw *= rTran;
        draw *= tTran;
        //draw *= parentTransform;

		//0, 0, r, 0
		//0, 0, g, 0
		//b, a, 0, 0
		//0, 0, 0, 0

		//r
		draw[0].z = models[i][2].x;
		//g
		draw[1].z = models[i][2].y;
		//b
		draw[2].x = models[i][2].z;
		//a
		draw[2].y = models[i][2].w;

        //Should be Column-Major?
        models[i] = draw;
	}
}